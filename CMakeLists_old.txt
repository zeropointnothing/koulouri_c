cmake_minimum_required(VERSION 3.16)

project(koulouri_c VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

set(PROJECT_SOURCES
        src/main.cpp
#        src/qtui/QtMainWindow.cpp
#        include/QtMainWindow.h
#        src/qtui/QtMainWindow.ui
#        src/curses/QtMainWindow.cpp
#        src/curses/QtMainWindow.h
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(koulouri_c
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET koulouri_c APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(koulouri_c SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        find_package(Qt5 REQUIRED COMPONENTS Widgets)

        add_executable(koulouri_c
            ${PROJECT_SOURCES}
                src/qtui/songitemwidget.ui
                include/songitemwidget.h
                src/qtui/songitemwidget.cpp
        )
    endif()
endif()

# add relative targets
target_include_directories(koulouri_c PRIVATE "${CMAKE_SOURCE_DIR}/include")

add_library(audio STATIC
        src/player/player.cpp include/player/player.h
        include/player/metahandler.h src/player/metahandler.cpp
)
target_include_directories(audio PRIVATE "${CMAKE_SOURCE_DIR}/include")
target_include_directories(audio PUBLIC /usr/include)

# taglib doesn't supply a valid CMake file - use pkg-config instead
find_package(PkgConfig REQUIRED)
pkg_check_modules(TAGLIB REQUIRED IMPORTED_TARGET taglib)
target_link_libraries(audio PRIVATE portaudio sndfile PkgConfig::TAGLIB)

# link libraries back to final application
target_link_libraries(koulouri_c PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(koulouri_c PRIVATE audio)

# not all systems use ALSA, we should account for this!
find_library(ALSA_LIB NAMES asound)

if(ALSA_LIB)
    message(STATUS "Found ALSA (should be silenced!): ${ALSA_LIB}")
    target_link_libraries(koulouri_c PRIVATE ${ALSA_LIB})
    target_compile_definitions(koulouri_c PRIVATE HAS_ALSA=1)
else()
    message(STATUS "System does not support ALSA code!")
endif()
# ...


# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.koulouri_c)
endif()
set_target_properties(koulouri_c PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS koulouri_c
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(koulouri_c)
endif()
